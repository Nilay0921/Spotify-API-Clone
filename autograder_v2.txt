Running auto-marker
Test #1 - "Add non-existing user - calling route /profile to add user with userName 'user1' and check response status" - Test Passed! | 1/1
  Expected: "OK" of type str
  Received: "OK" of type str
Test #2 - "Add non-existing user - ensure user #1 was successfully stored" - Test Passed! | 1/1
  Expected: "username: user1, password: user1-password, fullname: user1-fullName" of type str
  Received: "username: user1, password: user1-password, fullname: user1-fullName" of type str
Test #3 - "Add non-existing user #2 - calling route /profile to add user with userName 'user1' and check response status" - Test Passed! | 1/1
  Expected: "OK" of type str
  Received: "OK" of type str
Test #4 - "Add non-existing user - ensure user #2 was successfully stored" - Test Passed! | 1/1
  Expected: "username: ilir, password: ilir-password, fullname: ilir-fullName" of type str
  Received: "username: ilir, password: ilir-password, fullname: ilir-fullName" of type str
Test #5 - "Add existing user - calling route /profile to add user with userName 'user1'" - Test Passed! | 1/1
  Expected: "Any response except OK since 'user1' already exists" of type str
  Received: "INTERNAL_SERVER_ERROR" of type str
Test #6 - "Add existing user - calling route /profile with missing params'" - Test Passed! | 1/1
  Expected: "Any response except OK since params are missing" of type str
  Received: "INTERNAL_SERVER_ERROR" of type str
Test #7 - "Add new song with correct parameters - check status is OK" - Test Passed! | 1/1
  Expected: "OK" of type str
  Received: "OK" of type str
Test #8 - "Add new song with correct parameters - check if response is as expected" - Test Passed! | 1/1
  Expected: "songName: Hey There Delilah, songArtistFullName: Plain White T's, songAlbum: All That We Needed, songAmountFavourites: 0" of type str
  Received: "songName: Hey There Delilah, songArtistFullName: Plain White T's, songAlbum: All That We Needed, songAmountFavourites: 0" of type str
Test #9 - "Add new song with correct parameters - check song is stored correctly in DB" - Test Passed! | 1/1
  Expected: "songName: Hey There Delilah, songArtistFullName: Plain White T's, songAlbum: All That We Needed, songAmountFavourites: 0" of type str
  Received: "songName: Hey There Delilah, songArtistFullName: Plain White T's, songAlbum: All That We Needed, songAmountFavourites: 0" of type str
Test #10 - "Add song with missing parameter songArtistFullName - check status non-OK" - Test Passed! | 1/1
  Expected: "Any string that isn't OK" of type str
  Received: "INTERNAL_SERVER_ERROR" of type str
Test #11 - "Add song with missing parameter songArtistFullName - ensure number of documents hasn't changed" - Test Passed! | 1/1
  Expected: "11" of type int
  Received: "11" of type int
  More details: For the above test, if the received result is 99999, the endpoint is coded incorrectly.
Test #12 - "Add song with unexpected parameter 'unexpectedParam' - ensure unexpected parameter is ignored and status is OK" - Test Passed! | 1/1
  Expected: "OK" of type str
  Received: "OK" of type str
Test #13 - "Add song with unexpected parameter 'unexpectedParam' - ensure unexpected parameter is ignored and song was added successfully by checking if ID exists" - Test Passed! | 1/1
  Expected: "True" of type bool
  Received: "True" of type bool
Test #14 - "Add song with all invalid parameters - ensure correct status of not-OK" - Test Passed! | 1/1
  Expected: "Any response that isn't OK" of type str
  Received: "INTERNAL_SERVER_ERROR" of type str
Test #15 - "Add song with all invalid parameters - ensure no documents were added" - Test Passed! | 1/1
  Expected: "12" of type int
  Received: "12" of type int
Test #16 - "Get song title by ID which exists - check status is OK" - Test Passed! | 1/1
  Expected: "OK" of type str
  Received: "OK" of type str
Test #17 - "Get song title by ID which exists - check title matches what was sent" - Test Passed! | 1/1
  Expected: "Hey There Delilah" of type str
  Received: "Hey There Delilah" of type str
Test #18 - "Get song title by ID which doesn't exist - check status is non-OK" - Test Passed! | 1/1
  Expected: "Any status which is non-OK" of type str
  Received: "NOT_FOUND" of type str
Test #19 - "Follow friend with correct body params - calling /followFriend as userName 'user1' to follow friend with userName 'ilir'" - Test Passed! | 1/1
  Expected: "OK" of type str
  Received: "OK" of type str
Test #20 - "Follow friend with correct body params - ensure the follower-followee relationship is one-directional" - Test Passed! | 1/1
  Expected: "False" of type bool
  Received: "False" of type bool
  More details: For the above test, we test to make sure that 'ilir' is not friends with 'user1' because the relationship is one-directional. 'ilir's friend list is retrieved directly from the database.
Test #21 - "Follow friend with correct body params - calling /followFriend as userName 'ilir' to follow friend with userName 'user1'" - Test Passed! | 1/1
  Expected: "OK" of type str
  Received: "OK" of type str
Test #22 - "Follow friend with correct body params - ensure the follower-followee relationship is two-directional" - Test Passed! | 1/1
  Expected: "False" of type bool
  Received: "False" of type bool
  More details: For the above test, we test to see if the user 'user1' is in 'ilir's friend list. Because the relationship is now two-directional, we expect to see 'user1' in 'ilir's friend list. Results are retrieved directly from the database.
Test #23 - "Follow non-existent friend as existing user - ensure a non-OK response" - Test Passed! | 1/1
  Expected: "Any response except OK since the follower is non-existent" of type str
  Received: "NOT_FOUND" of type str
Test #24 - "Follow existing friend as non-existing user - ensure a non-OK response" - Test Passed! | 1/1
  Expected: "Any response except OK since the followee is non-existent" of type str
  Received: "NOT_FOUND" of type str
Test #25 - "Follow friend as an existing user (missing friendUserName param) - ensure a non-OK response" - Test Passed! | 1/1
  Expected: "Any response except OK since 'friendUserName' param is missing" of type str
  Received: "404" of type int
Test #26 - "Like an existing song - check to see if status is OK" - Test Passed! | 1/1
  Expected: "OK" of type str
  Received: "OK" of type str
Test #27 - "Like an existing song - check to see if liking via /likeSong increments favourites counter" - Test Passed! | 1/1
  Expected: "1" of type int
  Received: "1" of type Int64
Test #28 - "Get all friends' favorite song titles - check status is OK" - Test Passed! | 1/1
  Expected: "OK" of type str
  Received: "OK" of type str
Test #29 - "Get all friends' favorite song titles - ensure 'user1' is in 'ilir's friends list" - Test Failed! | 0/1
  Expected: "True" of type bool
  Received: "False" of type bool
Test #30 - "Get all friends' favorite song titles - ensure existing song is in 'user1's favourited songs" - Test Failed! | 0/1
  Expected: "True" of type bool
  Received: "'user1'" of type KeyError
  More details: Exception raised!
Test #31 - "Increment valid song's favourites count - check if status is OK" - Test Passed! | 1/1
  Expected: "OK" of type str
  Received: "OK" of type str
Test #32 - "Increment valid song's favourites count - check if song amount favourites incremented via DB" - Test Passed! | 1/1
  Expected: "2" of type int
  Received: "2" of type int
  More details: For the above test, we test to see if the number of favourites for this existing song is 1 higher than the number of favourites before incrementing.
  More details: If the expected result is 99999, your endpoint does not work. See the above tests for reasons why.
Test #33 - "Increment non-existent song's favourites count - check if status is non-OK" - Test Passed! | 1/1
  Expected: "Any status that is non-OK" of type str
  Received: "NOT_FOUND" of type str
Test #34 - "Increment non-existent song's favourites count - ensure no song was created from a non-existent ID" - Test Passed! | 1/1
  Expected: "None" of type NoneType
  Received: "None" of type NoneType
  More details: For the above test, we ensure that there isn't an entry in the database corresponding to the non-existing ID as a result of this increment call.
Test #35 - "Decrement valid song's favourites count - check if status is OK" - Test Passed! | 1/1
  Expected: "OK" of type str
  Received: "OK" of type str
Test #36 - "Decrement valid song's favourites count - check if count is decremented" - Test Passed! | 1/1
  Expected: "1" of type int
  Received: "1" of type int
  More details: For the above test, upon decrementing a song's favourites count, we check if song's favourites count has updated in the database to be one lower than what it was before this call was made.
  More details: If your expected result was 99999, your endpoint doesn't work. See the above tests for reasons why.
Test #37 - "Decrement valid song's favourites count past 0 - ensure count stays at 0" - Test Passed! | 1/1
  Expected: "0" of type int
  Received: "0" of type int
Test #38 - "Decrement non-existent song's favourites count - check if status is OK" - Test Passed! | 1/1
  Expected: "Any status that is not-OK" of type str
  Received: "NOT_FOUND" of type str
Test #39 - "Decrement non-existent song's favourites count - check if the non-existent song was created" - Test Passed! | 1/1
  Expected: "None" of type NoneType
  Received: "None" of type NoneType
  More details: For the above test, upon decrementing a non-existent song's favourites count, we ensure that this song wasn't created instead.
Test #40 - "Unlike an existing song - check to see if status is OK" - Test Passed! | 1/1
  Expected: "OK" of type str
  Received: "OK" of type str
Test #41 - "Unlike an existing song - check to see if the user still likes the song in the database" - Test Passed! | 1/1
  Expected: "False" of type bool
  Received: "False" of type bool
Test #42 - "Unlike an existing song - check to see if the likes for the song has decreased by 1" - Test Passed! | 1/1
  Expected: "0" of type Int64
  Received: "0" of type int
  More details: If your expected number of favourites is 99999, your endpoint doesn't work. See the above tests for reason why.
Test #43 - "Unfollow existing friend - check for OK status when 'user1' unfollows 'ilir'" - Test Passed! | 1/1
  Expected: "OK" of type str
  Received: "OK" of type str
Test #44 - "Unfollow existing friend - check to ensure 'ilir' didn't unfollow 'user1'" - Test Passed! | 1/1
  Expected: "True" of type bool
  Received: "True" of type bool
Test #45 - "Unfollow existing friend - check to ensure 'user1' unfollowed 'ilir' in the database" - Test Passed! | 1/1
  Expected: "False" of type bool
  Received: "False" of type bool
Test #46 - "Delete song with valid ID - check for OK status" - Test Passed! | 1/1
  Expected: "OK" of type str
  Received: "OK" of type str
Test #47 - "Delete song with valid ID - check for deletion of song in Song database" - Test Passed! | 1/1
  Expected: "None" of type NoneType
  Received: "None" of type NoneType
Test #48 - "Delete song with valid ID - check for deletion of song in Profile database" - Test Passed! | 1/1
  Expected: "None" of type NoneType
  Received: "None" of type NoneType
Automarker Grade: 46/48
